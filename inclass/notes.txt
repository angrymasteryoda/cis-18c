big O notation

say we have an algorthim we want to test its effiency before we use it


efficiency of time
				of space ( ie amount of memory required )
				
next week merger sort
merge sort O notation = O(nlogn) 	time
									  O(n^2) 		space
									  
gmplib library for multiple percision numbers in c++

if log is in the computer its assumed base 2

O(1) == constant time
O(log n) == log n  ( base 2)
O(n log n ) == n * log *n
O( n ) == linear time
O( n^2 ) == quadratic
O(2^n ) == exponential


Time complexity ( n could be any unit of time )
n		 O(1)		O(logn)		O(nlogn) 		O(n)			O(n^2)			O(2^n)
1		 1			0					0					1				1					2
2		 1			1					2					2				4					4
3		 1			1.58				4.75				3				
10	 1			3.32				33.2				10			100				1024
1000 1			9.96				99.6				1000		10000000	2^1000


using conrads bag class as example

O(1) 			== add, isEmpty, getSize
O(log n) 		== 
O(n log n )	== 
O( n ) 			== remove, contains, toArray
O( n^2 ) 		== 
O(2^n ) 		== 


int n = 10, s = 0;
for ( int i = 0; i < n; i++ ){ 
	s = s+1;
}

is the order of O(n)

what is s when 
n =1? 			== 1
n = 10? 		== 10
n = 100?		== 100
n = 1000?	== 1000




int n = 10, s = 0;
for ( int i = 0; i < n; i++ ){ 
	for ( int j = 0; j < n; j++ ){ 
		s = s+1;
	}
}

is the order of O(n^2)

matrix multiplaction
matrix a = [ 1, 2 ]
				 [ 3, 4 ]
matrix b = [ 5, 6 ]
				 [ 7, 8 ]

find ab = [ ( 1 * 5 + 2 * 7 ), ( 1 * 6 + 2 * 8 ) ] == [ 19, 22 ]
			  [ ( 3 * 5 + 4 * 7 ), ( 3 * 6 + 4 * 8 ) ] 	  [ 43, 50 ]


			for( i = 0; i < n; i++ ) {
ntimes		for( int j = 0; j < n; j++ ){
n times			c[i][j] = 0;
					for( int k = 0; k < n; k++ ) {
n times				c[i][j] = c[i][j] + a[i][k] * b[k][j];
					}
				}
			}
so program is to the order O( n^3 )

countdown recursive function

public void count( int n ){
	IO.println( n );
	if( n > 1 ){ count( n - 1 ); }
}
public void main(){ count( 10); }



public void count( int n ){
	IO.println( n );
	if( n > 1 ){ count( n  / 2 ); }
}
public void main(){ count( 10); }

n = 2  c = 2
n = 4  c = 3
n = 8  c = 4
n = 16  c = 5


soo its O( 1 + log n )
 assignment 1 is to anaylize why it is +1 and not log n
 
 assignment #3 
 implement in your bag class the selection sort method and the merge sort method.  both methods need to pass a boolean parameter that determines the order ( true for ascending false descending).
 provide driver main function demonstrate correctness of both methods with String, Integer and doubler wrapper classes